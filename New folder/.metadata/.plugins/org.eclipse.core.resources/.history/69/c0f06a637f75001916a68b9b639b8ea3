package com.evry.springproject.Dao;

import java.math.BigDecimal;
import java.util.List;
import java.util.Random;

import javax.persistence.EntityManager;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;

import org.hibernate.Criteria;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.LogicalExpression;
import org.hibernate.criterion.MatchMode;
import org.hibernate.criterion.Restrictions;
import org.hibernate.query.Query;
import org.hibernate.type.EntityType;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.evry.springproject.Domain.Account;
import com.evry.springproject.Domain.User;

@Repository
public class UserDaoImpl implements UserDAO {

private EntityManager entityManager;
	
	@Autowired
	public UserDaoImpl(EntityManager theEntityManager) {
		entityManager = theEntityManager;
	}
	
	
	public void saveUser(User user) {

		// save or update the employee
				User dbUser= entityManager.merge(user);
				
				// update with id from db ... so we can get generated id for save/insert
				dbUser.setId(dbUser.getId());

	}

	@Override
	public List<User> getUsers() {
		

		// create a query
		Query theQuery = 
				(Query) entityManager.createQuery("from User");
		
		// execute query and get result list
		List<User> employees = theQuery.getResultList();
		
		// return the results		
		return employees;

	}

	@Override
	public User getUser(int userId) {
		// get employee
				User theUser = 	entityManager.find(User.class, userId);
				
				// return employee
				return theUser;
	}

	@Override
	public void deleteUser(int userId) {
		// delete object with primary key
				Query theQuery = (Query) entityManager.createQuery(
									"delete from User where id=:employeeId");
				
				theQuery.setParameter("employeeId", userId);
				
				theQuery.executeUpdate();
	}

	@Override
	public void updateUser(User theUser) {
		// get current hibernate session
		Session currentSession = sessionFactory.getCurrentSession();

		currentSession.saveOrUpdate(theUser);
	}

	@Override
	public List<User> getUser(String theEmail) {
		// TODO Auto-generatedmethod stub
		/*
		 * Session currentSession = sessionFactory.getCurrentSession();
		 * 
		 * CriteriaBuilder builder = currentSession.getCriteriaBuilder();
		 * CriteriaQuery<User> criteriaquery = builder.createQuery(User.class);
		 * Root<User> personRoot = criteriaquery.from(User.class);
		 * 
		 * criteriaquery.select(personRoot);
		 * criteriaquery.where(builder.like(personRoot.get("email"), "%" + theEmail +
		 * "%"));
		 * 
		 * Query<User> users = currentSession.createQuery(criteriaquery);
		 * users.setMaxResults(500);
		 */

	//	return users.getResultList();
return null;
		
	}

}
