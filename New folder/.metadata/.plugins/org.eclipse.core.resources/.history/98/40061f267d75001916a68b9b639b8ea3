package com.evry.springproject.Config;

import java.beans.PropertyVetoException;
import java.util.Properties;
import java.util.logging.Logger;

import javax.persistence.EntityManagerFactory;
import javax.sql.DataSource;

import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.core.env.Environment;
import org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.hibernate5.HibernateTransactionManager;
import org.springframework.orm.hibernate5.LocalSessionFactoryBean;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.JpaVendorAdapter;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

import com.mchange.v2.c3p0.ComboPooledDataSource;

@Configuration
@EnableWebMvc
@EnableTransactionManagement
@EnableJpaRepositories(basePackages = {"com.evry.springproject"})
@PropertySource({ "classpath:persistence-mysql.properties" })
public class DemoAppConfig implements WebMvcConfigurer {

	@Autowired
	private Environment env;
	
	private Logger logger = Logger.getLogger(getClass().getName());
	

	 @Bean
	 public DataSource dataSource() {
	     DriverManagerDataSource dataSource = new DriverManagerDataSource();
	  
	     dataSource.setDriverClassName("com.mysql.cj.jdbc.Driver");
	     dataSource.setUsername("RenukaPrasada");
	     dataSource.setPassword("pass123");
	     dataSource.setUrl(
	       "jdbc:mysql://localhost:3306/myDb?createDatabaseIfNotExist=true"); 
	      
	     return dataSource;
	 }
	 
	 
	 @Bean
	   public LocalContainerEntityManagerFactoryBean entityManagerFactory() {
	      LocalContainerEntityManagerFactoryBean em  = new LocalContainerEntityManagerFactoryBean();
	      em.setDataSource(dataSource());
	      em.setPackagesToScan(new String[] { "com.evry.springproject.Domain" });
	 
	      JpaVendorAdapter vendorAdapter = new HibernateJpaVendorAdapter();
	      em.setJpaVendorAdapter(vendorAdapter);
	      em.setJpaProperties(additionalProperties());
	 
	      return em;
	   }
	 
	 @Bean
	 public PlatformTransactionManager transactionManager(EntityManagerFactory emf) {
	     JpaTransactionManager transactionManager = new JpaTransactionManager();
	     transactionManager.setEntityManagerFactory(emf);
	  
	     return transactionManager;
	 }
	 
	 @Bean
	 public PersistenceExceptionTranslationPostProcessor exceptionTranslation(){
	     return new PersistenceExceptionTranslationPostProcessor();
	 }
	  
	 Properties additionalProperties() {
	     Properties properties = new Properties();
	     properties.setProperty("hibernate.hbm2ddl.auto", "create-drop");
	     properties.setProperty("hibernate.dialect", "org.hibernate.dialect.MySQL5Dialect");
	         
	     return properties;
	 }
	 
	/*
	 * private Properties getHibernateProperties() {
	 * 
	 * // set hibernate properties Properties props = new Properties();
	 * 
	 * props.setProperty("hibernate.dialect", env.getProperty("hibernate.dialect"));
	 * props.setProperty("hibernate.show_sql",
	 * env.getProperty("hibernate.show_sql"));
	 * 
	 * return props; }
	 */


	
	
	
	
	 
}









